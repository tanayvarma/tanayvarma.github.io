{
  "name": "Proβurst ",
  "tagline": "Android Application to Detect Best Images in a Burst",
  "body": "#Summary \r\nWe are going to create an Android application that efficiently uses the parallel processing capabilities of an Android-based machine’s GPU to rapidly perform parallel image analysis on a burst - several photographs captured in quick succession. \r\n\r\n#Background\r\nWe are interested in creating an application that can simplify and accelerate the process of selecting the best image from a burst. Specifically, a burst contains a large number of images and it is often cumbersome to sift through all the images to find the best one. Our application aims to detect the images with the highest rate of people with eyes open and smiling. If none of the images completely match all the parameters, then our application will create a composite image i.e. stitching together an image - from the entire library of burst - where everyone is smiling with their eyes open.\r\n\r\n\r\nA sequential version of the application has several bottlenecks: \r\n\r\n1. Serial analysis and execution of each image in the burst will be extremely slow as there is a large number of photographs in burst.  We aim to provide a near real-time solution to the problem. \r\n\r\n2. Sequentially analyzing each image for face and eye detection will be extremely slow, and applying a serial vision algorithm to all the images in the burst would take a long time and a lot of processing power. \r\n\r\n3. Creating the composite image sequentially will be a bottleneck in the runtime of this application. \r\n\r\n4. Most importantly, a sequential version of the whole application will not be able to benefit from the machine’s GPU power and will also slow down the CPU as it will perform a lot of tasks on the latter. \r\n\r\nTherefore, all the aforementioned aspects of the application can be significantly improved from parallelism. We plan to use OpenCL (Android’s version of CUDA) to exploit parallelism in the multi-core chip. The benefits of a parallel application be better understood using the following illustrations highlighting the difference between the sequential and parallel versions. \t\r\n\r\n![Photo Burst] (https://41.media.tumblr.com/1270c91a9a7156bc1350a5a6cd1d461b/tumblr_o4z04zwsvR1vqq9vno1_1280.png)\r\n\r\n### Applying to the Sequential Version\r\n![s1] (https://40.media.tumblr.com/868c2a42d8a9d40622f54073bf5ce8d8/tumblr_o4yz7zJJhj1vqq9vno1_1280.png)\r\n![s2] (https://40.media.tumblr.com/da4449b2dd52023d428dc9fa3b9abbae/tumblr_o4yz7zJJhj1vqq9vno2_1280.png)\r\n![s3] (https://41.media.tumblr.com/ee75219ce559843a0d2741cb5a2be96e/tumblr_o4yz7zJJhj1vqq9vno3_1280.png)\r\n\r\n### Now Applying to the parallel version (For illustration, assuming a 4 core machine)\r\n\r\n![p1](https://36.media.tumblr.com/336163365d27f70217b9fc132706cfa0/tumblr_o4yz7zJJhj1vqq9vno4_1280.png)\r\n\r\n### Sequential algorithm for Vision Analysis (Image taken from [here](http://www.engineersgarage.com/sites/default/files/imagecache/Original/wysiwyg_imageupload/28714/Face-Recognition.jpg))\r\n\r\n![p2](https://41.media.tumblr.com/c91edb3ddcd24df5ba573a6a7dcfb80c/tumblr_o4yz7zJJhj1vqq9vno5_1280.png)\r\n\r\n### Parallel algorithm for Vision Analysis (For illustration, assuming a 4 core machine)\r\n\r\n![p3](https://41.media.tumblr.com/53bf572785aa18dd9cc3ed5e806dde4e/tumblr_o4yz7zJJhj1vqq9vno6_1280.png)\r\n\r\n# The Challenge \r\n\r\nThe application is challenging in a number of ways: \r\n\r\n1. OpenCL is written in C/C++ whereas Android applications are written in Java. As we plan to make our code highly parallelizable to specific machines (fully exploiting our knowledge of the chips), we will have to compile C++ OpenCL code in our Java code.\r\n\r\n2. As a burst contains a large number of images, there will be a high amount of memory accesses. This implies that a lot will depend on making sure that the computation-to-communication ratio is high. To ensure that the computation-to-communication ratio is high, we will need to handle cache optimizations of image data well in order to achieve maximum cache hits. \r\n\r\n3. Efficiently detecting facial features is a lot more than simply sending different parts of the image to different cores; we will have to make sure that distribution of work is even and handle cases that require high computation with more processing power. \r\n\r\n4. Stitching together an image will require a lot of inter-communication between processes and more processing power, which means that we will need to dynamically handle parallel processing of the code based not only on the dataset (burst) but also on what the algorithm is working on – eye detection, smile detection, stitching, etc. \r\n\r\n5. During the analysis of each image, our application will perform numerous checks to see if the input meets some requirements. A high number of ‘if’ statements might cause divergent control flow execution, which will need to be handled in way that it does not affect accuracy at the cost of speedup. \r\n\r\n# Stretch Goal \r\n\r\nWe will further try to perform a quick image classification by parallelizing the popular 'Bag of Visual Words' algorithm. This Image classification can then be used to modify heuristics for detecting relevant image features and stitching.\r\n\r\n![p6] (http://cs.brown.edu/courses/cs143/proj3/header.png)\r\n\r\n\r\n### References\r\n\r\nhttp://www1.cs.columbia.edu/CAVE/publications/pdfs/Bitouk_SIGGRAPH08.pdf\r\nhttps://daim.idi.ntnu.no/masteroppgaver/004/4762/masteroppgave.pdf\r\n\r\n### Authors and Contributors\r\nTanay Varma (@tanayvarma) and Mohak Nahta (@mnahta)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}